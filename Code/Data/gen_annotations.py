from pathlib import Path
import os, math

def gen_annotations(dataset_root,
                    num_frames: int = 16,
                    temporal_stride: int = 4,
                    annotation_filename: str = 'annotation.txt',):
    '''
    Generate annotations for VideoFrameDataset. Video samples are taken from the 
    source videos, which are num_frames long with stride of temporal_stride. 
    '''

    clip_length = num_frames*temporal_stride    # Total number of frames the clip spans. Divide by fps to get length in seconds.
    clip_stride = int(clip_length/2)            # Number of frames between clips

    for subdir in os.listdir(dataset_root):
        f = open(Path(dataset_root,subdir,annotation_filename),'w')
        for score in os.listdir(Path(dataset_root, subdir)):
            try: int(score)
            except ValueError: continue
            for task in os.listdir(Path(dataset_root,subdir,score)):
                # new_task = task.replace(' ','_')
                # os.rename(Path(dataset_root,subdir,score,task),Path(dataset_root,subdir,score,new_task))
                frames = os.listdir(Path(dataset_root,subdir,score,task))
                total_frames = len(frames)
                num_clips = math.floor((total_frames-clip_length)/clip_stride)+1
                for i in range(num_clips):
                    start_frames = i*clip_stride + 1
                    end_frames = start_frames + clip_length - 1
                    pathname = str(Path(score,task))
                    # Shift scores down with -1, since score 0 was removed. 
                    f.write(f'{pathname} {start_frames} {end_frames} {int(score)-1}\n')
        f.close()

def gen_sparse_annotations(dataset_root,
                           annotation_source_filename,
                           annotation_filename):
    '''
    Generate sparse annotations for VideoFrameDataset. annotation_source_filename is an annotation 
    file generated by gen_annotations (above). The number of lines in the source file determines the
    total number of samples that will be in the dataset. 
    '''
    for subdir in os.listdir(dataset_root):
        # Get total number of samples = # of lines in source file
        with open(Path(dataset_root, subdir, annotation_source_filename),'r') as source:
            num_samples = len(source.readlines())
        # Start writing output annotation file
        with open(Path(dataset_root, subdir, annotation_filename), 'w') as f:
            scores = [x for x in os.listdir(Path(dataset_root, subdir)) if x.isnumeric()]
            samples_per_class = math.floor(num_samples/len(scores))
            for score in scores:
                videos = os.listdir(Path(dataset_root, subdir, score))
                samples_per_video = math.floor(samples_per_class/len(videos))
                for video in videos:
                    start_frame = 1
                    end_frame = len(os.listdir(Path(dataset_root, subdir, score, video)))
                    pathname = str(Path(score, video))
                    # Re-sample video in order to balance the dataset
                    for _ in range(samples_per_video):
                        # Shift scores down with -1, since score 0 was removed. 
                        f.write(f'{pathname} {start_frame} {end_frame} {int(score)-1}\n')

def rename_spaces(root):
    '''
    Rename task names to replace spaces with underscore (spaces mess up with VideoFrameDataset annotation file)
    '''
    # root = Path(r'C:\Users\zhaon\Documents\GRASSP_JPG_FRAMES')
    for subdir in os.listdir(root):
        scores = [x for x in os.listdir(Path(root, subdir)) if x.isnumeric()]
        for score in scores:
            tasks = os.listdir(Path(root,subdir,score))
            for task in tasks:
                if ' ' in task:
                    os.rename(Path(root,subdir,score,task), Path(root,subdir,score,task.replace(' ','_')))
